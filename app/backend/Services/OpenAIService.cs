// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT License.

using ChatMessage = Azure.AI.OpenAI.ChatMessage;

namespace CustomerSupportServiceSample.Services
{
    public class OpenAIService : IOpenAIService
    {
        private readonly ILogger logger;
        private readonly SearchClient searchClient;
        private readonly OpenAIClient openAIClient;
        private readonly string openAIDeploymentName;

        private const string SystemAnswerPrompt = """
        You are a Solar Power Incentives chatbot whose primary goal is to help users determine which solar programs and rebates are relevant to them.
        Provide concise replies that are polite and professional. Answer questions truthfully with consideration to context provided below on changes for 2023 solar incentive fund. 
        Do not answer questions that are not related to Solar Power incentives and respond with \"I can only help with any solar power questions you may have.\". 
        If you do not know the answer to a question, respond by saying “You know what, it’s probably best if I transfer you to someone with expertise in your area”  
        2023 Solar Incentive Fund: Direct Subsidies: We will provide direct subsidies to homeowners equivalent to 30% of the total cost of solar panel installation. 
        This initiative aims to significantly reduce the financial burden on homeowners. For a system with an installation cost of $20,000, a homeowner would receive a direct subsidy of $6,000. 
        Tax Incentives:To further promote the adoption of solar energy, a tax credit of 26% of the total cost of the solar system will be provided. 
        This tax credit effectively reduces the cost of a $20,000 system by an additional $5,200. 
        Solar Renewable Energy Certificates (SRECs):  For every megawatt-hour (MWh) of electricity that a solar power system produces, the homeowner will be awarded one SREC. 
        These certificates can be sold on a marketplace to utility companies, potentially generating up to $250 per certificate, based on current market rates. 
        Net Metering: Our policy promotes the sale of excess electricity generated by residential solar panels back to the grid. 
        The feed-in tariff will be set at $0.10 per kilowatt-hour (kWh), enabling homeowners to earn income from their investment. 
        Low-Interest Financing: Through partnerships with local financial institutions, homeowners will be offered low-interest loans for solar installations. 
        The interest rates for these loans will be capped at 1.99% APR. Group Buying or Solarize Programs: Community-based initiatives will be promoted to facilitate bulk purchase of solar systems. 
        These group buying programs can potentially reduce the cost per system by up to 20%. Education and Outreach Programs: We will invest in the development and dissemination of educational resources about solar energy. 
        This will include free workshops and online resources aimed at assisting homeowners in understanding the benefits of solar energy and the specifics of our incentive program. 
        Incentives for Improvements and Upgrades: An additional 10% rebate will be offered on the cost of energy storage or efficiency upgrades to the solar systems, 
        encouraging homeowners to enhance their systems and contribute further to energy conservation.
        """;

        private const string SystemAnswerPromptWithHistory =
            SystemAnswerPrompt + """For context, here is the chat history so far: {0}""";

        private const string EmailSummaryPrompt = """
        Generate a summary of the below conversation to send an email in the following 
        format: 
        Summary of the discussion between the customer and the agent: 
        Outcome of the conversation: 
        Action items for follow-up: {0}
        and convert the above to sample email format starts with 
        greeting {1} without using subject and end with best regards from {2}
        """;

        private const string SystemAssistantPrompt = "You are a helpful assistant";

        public OpenAIService(
            IConfiguration configuration,
            SearchClient searchClient,
            OpenAIClient openAIClient,
            ILogger<OpenAIService> logger)
        {
            this.searchClient = searchClient;
            this.openAIClient = openAIClient;
            this.logger = logger;

            openAIDeploymentName = configuration["OpenAISettings:OpenAIDeploymentName"]!;
        }

        public async Task<bool> HasIntent(string userQuery, string intentDescription)
        {
            var systemPrompt = SystemAssistantPrompt;
            var baseUserPrompt = "In 1 word: does {0} have similar meaning as {1}?";
            var combinedPrompt = string.Format(baseUserPrompt, userQuery, intentDescription);

            var response = await GetChatCompletions(systemPrompt, combinedPrompt);

            var isMatch = response.ToLowerInvariant().Contains("yes");
            logger.LogInformation($"OpenAI results: isMatch={isMatch}, customerQuery='{userQuery}', intentDescription='{intentDescription}'");
            return isMatch;
        }

        public async Task<string> AnswerAsync(string userQuery, List<ChatHistory>? history = null, int maxTokens = 1000)
        {
            history ??= new List<ChatHistory>();
            var systemPrompt = SystemAnswerPrompt;
            if (history.Count() > 0)
            {
                systemPrompt = string.Format(SystemAnswerPromptWithHistory, TransformChatHistoryToString(history));
            }

            var baseUserPrompt = "In less than 200 characters: respond to this question: {0} from this content {1}?";
            var relatedContent = await RetrieveRelatedDocumentAsync(userQuery) ?? SystemAnswerPrompt;
            var userPrompt = string.Format(baseUserPrompt, userQuery, relatedContent);

            return await GetChatCompletions(systemPrompt, userPrompt, maxTokens);
        }

        public async Task<ConversationInsights> GenerateChatInsights(string text)
        {
            var systemPrompt = SystemAssistantPrompt;
            var summaryPrompt = "Summarize conversation between Customer and Agent: {0}";
            var highlightsPrompt = "What are the highlights on the conversation between Customer and Agent: {0}";
            var actionPrompt = "Follow up action on Internet plans for agent from this conversation: {0}";

            var summary = await GetChatCompletions(systemPrompt, string.Format(summaryPrompt, text), 200);
            var highlights = await GetChatCompletions(systemPrompt, string.Format(highlightsPrompt, text), 200);
            var action = await GetChatCompletions(systemPrompt, string.Format(actionPrompt, text), 200);

            return new ConversationInsights()
            {
                SummaryItems = new List<SummaryItem>()
                {
                   new SummaryItem() { Title = "Summary", Description = summary },
                   new SummaryItem() { Title = "Highlights", Description = highlights },
                   new SummaryItem() { Title = "Actions", Description = action },
                },
            };
        }

        public async Task<string> GenerateChatInsightsForEmail(string text, string recipient, string sender)
        {
            var systemPrompt = SystemAssistantPrompt;
            var userPrompt = string.Format(EmailSummaryPrompt, text, recipient, sender);
            return await GetChatCompletions(systemPrompt, userPrompt);
        }

        private async Task<string> GetChatCompletions(string systemPrompt, string userPrompt, int maxTokens = 30)
        {
            var chatCompletionsOptions = new ChatCompletionsOptions()
            {
                Messages = {
                    new ChatMessage(ChatRole.System, systemPrompt),
                    new ChatMessage(ChatRole.User, userPrompt),
                    },
                MaxTokens = maxTokens,
                ChoiceCount = 1,
            };

            var response = await openAIClient.GetChatCompletionsAsync(
                deploymentOrModelName: openAIDeploymentName,
                chatCompletionsOptions);

            var response_content = response.Value.Choices[0].Message.Content;
            return response_content;
        }

        private string TransformChatHistoryToString(List<ChatHistory> history)
        {
            history.Reverse();
            List<string> transformedHistory = history.Select(x => x.Content)!.ToList<string>();
            return string.Join(" >>>> ", transformedHistory);
        }

        private async Task<string?> RetrieveRelatedDocumentAsync(string text)
        {
            string? result = null;

            SearchOptions options = new () { Size = 3 };
            var searchResultResponse = await searchClient.SearchAsync<SearchDocument>(text, options);
            SearchResults<SearchDocument> searchResult = searchResultResponse.Value;

            foreach (var doc in searchResult.GetResults())
            {
                result = doc.Document["content"].ToString();
            }

            return result;
        }
    }
}